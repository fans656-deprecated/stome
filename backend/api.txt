# Functions

1. Download file

    GET /img/girl.jpg

    Return the file content.

2. List directory

    GET /img
    GET /img/

    Return the directory listing result.

    With trailing slash, this is a explicit directory listing request.
    If the path is not a directory, return 400 bad request

    Without trailing slash, this is a dual request.
    If the path is a directory, return the listing result.
    If the path is a file, return the file content.

    Listing result is like

        {
            'dirs': [
                {'name': 'screenshots', 'path': '/img/screenshots', ...},
                {'name': 'tmp', 'path': '/img/tmp', ...},
            ],
            'files': [
                {'name': 'girl.jpg', 'path': '/img/girl.jpg', ...},
                {'name': 'test.png', 'path': '/img/test.png', ...},
            ]
        }

    The entries in `dirs` and `files` have fields of:

        name - name of the entry
        path - path of the entry
        owner - owner of the entry
        group - group of the entry
        access - access mode of the entry, same as Linux mode like 0664
        ctime - creation time like '2018-05-15 21:50:02 UTC'
        mtime - modification time like '2018-05-15 21:50:02 UTC'

3. Retrieve file/directory metadata

    GET /img?meta=1
    GET /img/girl.jpg?meta=1

    Return the file/directory metadata as JSON.


============================================================== Upload file

1. Simple upload

    -----------------------------------------------------------------------------
    PUT /img/girl.jpg
    <file-content>
    -----------------------------------------------------------------------------

    You can have `Content-Type` header set to avoid mimetype guessing.

        =========================================================================
        PUT /img/girl.jpg
        Content-Type: image/jpg
        <file-content>
        =========================================================================

    You can have `md5` parameter set to speed up transfer in case of duplication.

        =========================================================================
        PUT /img/girl.jpg?md5=0cc175b9c0f1b6a831c399e269772661
        <file-content>
        =========================================================================

2. Standard upload
    
    Construct a multipart HTTP request like (in JavaScript):
    
        let data = new FormData();
        data.append('meta', {
            size: 32196022,
            md5: '0cc175b9c0f1b6a831c399e269772661'
        });
        data.append('data', fileinput.files[0]);
        $.ajax({
            method: 'PUT',
            url: 'https://res.eno.zone/img/SIRO-1690.wmv',
            data: data,
            processData: false,
            contentType: false,
        });

    =============================================================================
    PUT /img/girl.jpg
    Content-Type: multipart/form-data; boundary=7cdabac12ad842909aa89b69b4508d69

    --7cdabac12ad842909aa89b69b4508d69
    Content-Disposition: form-data; name="meta"; filename="meta"
    Content-Type: application/json

    {"md5": "0cc175b9c0f1b6a831c399e269772661", "size": 32196022}
    --7cdabac12ad842909aa89b69b4508d69
    Content-Disposition: form-data; name="data"; filename="data"
    Content-Type: video/x-ms-wmv

    <file-content>
    --7cdabac12ad842909aa89b69b4508d69--
    =============================================================================
    
    You can split a large file into parts and uploading them separately.
    Specify in JSON the part begin and size.
    
        {
            "size": 23414856,
            "md5": "0cc175b9c0f1b6a831c399e269772661",
            "part-beg": 10667,
            "part-size": 1048576,
            "part-md5": "1f3cc023624cd5164474b5a8f49ea3a5"
        }
